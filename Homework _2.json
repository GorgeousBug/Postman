{
	"info": {
		"_postman_id": "309c364b-ad54-4cda-a794-ec00f3bd8c16",
		"name": "Homework _2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверить, что в body приходит правильный string\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Спарсить response body в json\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name вбить руками)\r",
							"\r",
							"\r",
							"pm.test(\"Name Check\", function () {\r",
							"  pm.expect(jsonData.name).to.eql(\"Liliana\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age вбить руками)\r",
							"\r",
							"\r",
							"pm.test(\"Age Check\", function () {\r",
							"  pm.expect(+jsonData.age).to.eql(31);\r",
							"});\r",
							"\r",
							"\r",
							"// спарсить request\r",
							"\r",
							"\r",
							"let request_data = request.data;\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request)\r",
							"\r",
							"\r",
							"pm.test(\"Request name equals responce name\", function () {\r",
							"  pm.expect(jsonData.name).to.eql(request_data.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"\r",
							"pm.test(\"Request age equals responce age\", function () {\r",
							"  pm.expect(jsonData.age).to.eql(request_data.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// проверить, что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Response salary is equal to request salary *4\", function () {\r",
							"  pm.expect(jsonData.family.u_salary_1_5_year).to.eql(request_data.salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Liliana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Спарсить response body в json\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request)\r",
							"\r",
							"pm.test(\"response name is equal to request params name\", function () {\r",
							"  pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"\r",
							"\r",
							"pm.test(\"response age is equal to request params age\", function () {\r",
							"  pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// проверить, что у параметра dog есть параметры name\r",
							"\r",
							"pm.test(\"dog has a property 'name'\", function () {\r",
							"  pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// проверить, что у параметра dog есть параметры age\r",
							"\r",
							"pm.test(\"dog has a property 'age'\", function () {\r",
							"  pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky\r",
							"\r",
							"\r",
							"pm.test(\"dog's name is Luky\", function () {\r",
							"  pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4\r",
							"\r",
							"\r",
							"pm.test(\"dog's age is 4\", function () {\r",
							"  pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Liliana",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "31",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Liliana&age=31&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Liliana"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Спарсить response body в json\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request)\r",
							"\r",
							"pm.test(\"response name is equal to request name\", function () {\r",
							"  pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"\r",
							"\r",
							"pm.test(\"response age is equal to request age\", function () {\r",
							"  pm.expect(jsonData.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"\r",
							"// Вывести в консоль параметр salary из request\r",
							"\r",
							"console.log(req.salary)\r",
							"\r",
							"\r",
							"// Вывести в консоль параметр salary из response\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary из response\r",
							"\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary из response\r",
							"\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request\r",
							"\r",
							"\r",
							"pm.test(\"response salary is equal to request salary\", function () {\r",
							"  pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request\r",
							"\r",
							"\r",
							"pm.test(\"response salary[1] is equal to request salary*2\", function () {\r",
							"  pm.expect(+jsonData.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request\r",
							"\r",
							"\r",
							"pm.test(\"response salary[2] is equal to request salary*3\", function () {\r",
							"  pm.expect(+jsonData.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"\r",
							"// создать в окружении переменную name\r",
							"\r",
							"pm.environment.set(\"name\")\r",
							"\r",
							"// создать в окружении переменную age\r",
							"\r",
							"pm.environment.set(\"age\")\r",
							"\r",
							"// создать в окружении переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\")\r",
							"\r",
							"// передать в окружение переменную name\r",
							"\r",
							"pm.environment.set(\"name\", req.name)\r",
							"\r",
							"// передать в окружение переменную age\r",
							"\r",
							"pm.environment.set(\"age\", req.age)\r",
							"\r",
							"// передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", req.salary)\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"\r",
							"jsonData.salary.forEach(function(salary){\r",
							"    console.log(salary)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Liliana",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "31",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Liliana&age=31&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Liliana"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"\r",
							"// Вставить параметры name, age, salary из окружения в request\r",
							"// {{name}}, {{age}}, {{salary}}\r",
							"\r",
							"\r",
							"// Проверить статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Спарсить response body в json\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request\r",
							"\r",
							"let requestData = request.data;\r",
							"\r",
							"// Проверить, что json resporesponse имееет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"response has a start_qa_salary param\", function () {\r",
							"  pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"response has a qa_salary_after_6_months param\", function () {\r",
							"  pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"response has a qa_salary_after_12_months param\", function () {\r",
							"  pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//  Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"response has a qa_salary_after_1.5_year param\", function () {\r",
							"  pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"response has a qa_salary_after_3.5_year param\", function () {\r",
							"  pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"response has a param person\", function () {\r",
							"  pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary in response is equal to the request salary\", function () {\r",
							"  pm.expect(jsonData.start_qa_salary).to.eql(+requestData.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary in response is equal to the request salary\", function () {\r",
							"  pm.expect(jsonData.qa_salary_after_6_months).to.eql(+requestData.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"in 'person' param u_name[1] is equal to salary from request\", function () {\r",
							"  pm.expect(jsonData.person.u_name[1]).to.eql(+requestData.salary);\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"\r",
							"Object.keys(jsonData.person).forEach(function(key) {\r",
							"    console.log(key, jsonData.person[key])\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}